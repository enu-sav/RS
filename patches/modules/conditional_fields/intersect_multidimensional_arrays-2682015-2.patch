diff --git a/conditional_fields.module b/conditional_fields.module
index 34503a6..465e537 100644
--- a/conditional_fields.module
+++ b/conditional_fields.module
@@ -532,7 +532,7 @@ function conditional_fields_form_after_build($form, &$form_state) {
         // The handler has no return value. Modify the $state parameter by
         // reference if needed.
         foreach ($state_handlers as $handler => $handler_conditions) {
-          if (array_intersect_assoc($handler_conditions, $dependee_form_field) == $handler_conditions) {
+          if (_conditional_fields_intersect_array($handler_conditions, $dependee_form_field) == $handler_conditions) {
             $handler($dependee_form_field, $dependee_form_state, $options, $state);
           }
         }
@@ -1986,3 +1986,27 @@ function conditional_fields_features_api() {
     ),
   );
 }
+
+/**
+ * Helper function to do a recursive compution of the intersection of arrays.
+ *
+ * @param array $arr1
+ *   The array with master values to check.
+ * @param array $arr2
+ *   An array to compare values against.
+ *
+ * @return array
+ *   An associative array containing all the values in $arr1 that are present
+ *   in $arr2.
+ */
+function _conditional_fields_intersect_array(&$arr1, &$arr2) {
+  if (!is_array($arr1) || !is_array($arr2)) {
+    return (string) $arr1 == (string) $arr2;
+  }
+  $commonkeys = array_intersect(array_keys($arr1), array_keys($arr2));
+  $ret = array();
+  foreach ($commonkeys as $key) {
+    $ret[$key] = _conditional_fields_intersect_array($arr1[$key], $arr2[$key]);
+  }
+  return $ret;
+}
