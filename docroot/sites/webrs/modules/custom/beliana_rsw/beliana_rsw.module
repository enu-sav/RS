<?php
# vim: ai ts=2 sts=2 et sw=2 ft=php

/**
 * @file
 * Module file for beliana_rsw module.
 */

/**
 * Implements hook_menu().
 *
 * @inheritdoc
 */
function beliana_rsw_menu() {
  $items = [];
  $items['get-freemap-image'] = [
    'title' => 'Freemap image',
    'page callback' =>'_beliana_get_freemap_image',
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
  ];

  $items['get-geodata-image'] = [
    'title' => 'Geodata image',
    'page callback' =>'_beliana_get_geodata_image',
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
  ];

  return $items;
}

const COUNTRY_LEVELS = [
  'AT' => [4],
  'DE' => [4],
  'FR' => [4],
  'UR' => [4],
  'CH' => [4],
];

/**
 * Implements hook_form_FORM_ID_alter().
 */
function beliana_form_ilustracia_node_form_alter(&$form, &$form_state) {
  $map_img_url = '';
  $image_preview_style = 'none';
  $freemap_default_url = 'https://www.freemap.sk/?map=8/48.681415/19.699450&layers=O&osm-relation=14296&embed=search';
  $form['field_freemap_url']['#attributes']['style'][] = 'display:none;';
  $form['field_mapa_obrazok_fid']['#attributes']['style'][] = 'display:none;';

  if (isset($form['field_freemap_url'][LANGUAGE_NONE][0]["value"]['#default_value'])) {
    $freemap_default_url = $form['field_freemap_url'][LANGUAGE_NONE][0]["value"]['#default_value'];
  }

  if (isset($form['#node']->field_obrazok_navrh_[LANGUAGE_NONE][0]['fid'])) {
    $image_preview_style = 'block';
    $map_img_url = file_create_url($form['#node']->field_obrazok_navrh_[LANGUAGE_NONE][0]['uri']);
  }

  $form['field_map_embed'] = [
    '#type' => 'item',
    '#markup' => '<div class="freemap-url-wrapper">' . $freemap_default_url . '</div>
                <div class="freemap-wrapper" style="width: 1200px; height: 900px;">
                  <iframe id="freemap" src="' . $freemap_default_url . '" style="width: 100%; height: 100%; border: 0; pointer-events: none;" allowfullscreen></iframe>
                </div>
                <div class="button">
                  <a href="#free-map-btn" class="form-submit" id="free-map-btn">Vytvoriť obrázok mapy</a>
                </div>
                <div class="image-preview" style="display: ' . $image_preview_style . ';">
                  <img id="free-map-img" width="auto" height="150" src="' . $map_img_url . '" />
                </div>',
    '#weight' => 20,
    '#states' => [
      'visible' => [
        ':input[name="field_zdroj_ilustracie[und]"]' => ['value' => 'Mapa'],
      ],
    ],
    '#access' => $form["field_zdroj_ilustracie"]["#access"],
  ];

  $form['field_geodata'] = [
    '#type' => 'item',
    '#markup' => '<div class="button">
                    <a href="#geodata-btn" class="form-submit" id="geodata-btn-place">Vytvoriť obrázok mapy - Poloha</a>
                  </div>
                  <div class="image-preview" style="display: ' . $image_preview_style . ';">
                    <img id="geodata-img" width="auto" height="150" src="' . $map_img_url . '" />
                  </div>',
    '#weight' => 22,
    '#states' => [
      'visible' => [
        ':input[name="field_zdroj_ilustracie[und]"]' => ['value' => 'Mapa - Poloha'],
      ],
    ],
    '#access' => $form['field_zdroj_ilustracie']['#access'],
  ];

  $form['field_country_select'] = [
    '#type' => 'container',
    '#attributes' => [
      'class' => ['top-content']
    ],
    '#weight' => 20,
    '#states' => [
      'visible' => [
        ':input[name="field_zdroj_ilustracie[und]"]' => ['value' => 'Mapa - Poloha'],
      ],
    ],
    '#access' => $form['field_zdroj_ilustracie']['#access'],
  ];

  $node_id = 0;
    if (!empty($form['#node']->nid)) {
    $node_id = $form['#node']->nid;
  }
  $form['node_id'] = [
    '#type' => 'hidden',
    '#value' => $node_id,
    '#attributes' => [
      'id' => ['node-id']
    ],
  ];


  $admin_level_id = 0;
  if (!empty($form_state['values']['admin_level_id']) && $form_state['triggering_element']['#name'] != 'country_code') {
    $admin_level_id = $form_state['values']['admin_level_id'];
  }
  $form['field_country_select']['admin_level_id'] = [
    '#type' => 'hidden',
    '#value' => $admin_level_id,
  ];

  $country_options = [
    0 => '- Zvoliť -',
    'SK' => 'Slovensko',
    'AT' => 'Rakúsko',
    'DE' => 'Nemecko',
    'FR' => 'Francúzsko',
    'CH' => 'Švajčiarsko',
    ]
  ;

  $form['field_country_select']['country_code'] = [
    '#title' => t('Štát'),
    '#type' => 'select',
    '#options' => $country_options,
    '#default_value' => $form_state["values"]["country_code"] ?? $country_options['0'],
    '#attributes' => [
      'class' => ['country-code']
    ],
    '#weight' => 22,
    '#ajax' => [
      'event' => 'change',
      'callback' => 'ajax_dropdown_region',
      'wrapper' => 'region-wrapper',
    ],
    '#states' => [
      'visible' => [
        ':input[name="field_zdroj_ilustracie[und]"]' => ['value' => 'Mapa - Poloha'],
      ],
    ],
    '#access' => $form['field_zdroj_ilustracie']['#access'],
  ];

  $country_code = $form_state['values']['country_code'];

  $form['field_country_select']['region_wrapper'] = [
    '#prefix' => '<div id="region-wrapper" class="visually-hidden">',
    '#suffix' => '</div>',
    '#weight' => 24,
  ];

  // Wrapper for city dropdown list
  $form['field_country_select']['region_wrapper']['district_wrapper'] = [
    '#prefix' => '<div id="district-wrapper" class="visually-hidden">',
    '#suffix' => '</div>',
    '#weight' => 26,
  ];

  // Wrapper for city dropdown list
  $form['field_country_select']['region_wrapper']['municipality_wrapper'] = [
    '#prefix' => '<div id="municipality-wrapper" class="visually-hidden">',
    '#suffix' => '</div>',
    '#weight' => 28,
  ];

  $country_admin_levels = COUNTRY_LEVELS[$country_code];

  if ($country_code != 'SK') {
    foreach ($country_admin_levels as $country_admin_level) {
      // Wrapper for admin level dropdown list

      $admin_level_options = get_data_from_map_sqlite($country_code, $country_admin_level);

      $form['field_country_select']['region_wrapper']['admin_level_' . $country_admin_level] = [
        '#title' => t('Admin level ' . $country_admin_level),
        '#type' => 'select',
        '#options' => $admin_level_options,
        '#default_value' => $form_state["values"]["admin_level_" . $country_admin_level] ?? $admin_level_options['0'],
        '#name' => 'admin_level_' . $country_admin_level,
        '#attributes' => [
          'class' => ['admin-level-' . $country_admin_level]
        ],
      ];
      if ($country_admin_level > $admin_level_id) {
        $form['field_country_select']['admin_level_id']["#value"] = $country_admin_level;
        break;
      }
    }

  } else {
//    // Options for city dropdown list
    $region_options = ['- Zvoliť -'];
    if (!empty($form_state['values']['country_code'])) {
      // Pre-populate options for city dropdown list if province id is set
      $region_options = get_data_from_json('kraj_3.geojson', 'IDN2', 'NUTS3', 'NUTS1_CODE', $form_state['values']['country']);
    }

    $form['field_country_select']['region_wrapper']['region'] = [
      '#title' => t('Kraj'),
      '#type' => 'select',
      '#options' => $region_options,
      '#attributes' => [
        'class' => ['geodata-region-wrapper']
      ],
      '#ajax' => [
        'event' => 'change',
        'callback' => 'ajax_dropdown_district',
        'wrapper' => 'district-wrapper',
      ],
    ];

    // Options for city dropdown list
    $district_options = ['- Zvoliť -'];
    if (!empty($form_state['values']['region'])) {
      // Pre-populate options for city dropdown list if province id is set
      $district_options = get_data_from_json('okres_3.geojson', 'IDN3', 'LAU1', 'IDN2', $form_state['values']['region']);
    }

    $form['field_country_select']['region_wrapper']['district_wrapper']['district'] = [
      '#title' => t('Okres'),
      '#type' => 'select',
      '#options' => $district_options,
      '#attributes' => [
        'class' => ['geodata-district-wrapper']
      ],
      '#ajax' => [
        'event' => 'change',
        'callback' => 'ajax_dropdown_municipality',
        'wrapper' => 'municipality-wrapper',
      ],
    ];

    // Options for city dropdown list
    $municipality_options = ['- Zvoliť -'];
    if (!empty($form_state["values"]["district"])) {
      // Pre-populate options for city dropdown list if province id is set
      $municipality_options = get_data_from_json('obec_3.geojson', 'IDN4', 'LAU2', 'IDN3', $form_state['values']['district']);
    }

    $form['field_country_select']['region_wrapper']['municipality_wrapper']['municipality'] = [
      '#title' => t('Obec'),
      '#type' => 'select',
      '#options' => $municipality_options,
      '#attributes' => [
        'class' => ['geodata-municipality-wrapper']
      ],
    ];
  }
}

// Get country values form geodata files
function get_data_from_json($file_name, $param_1 = NULL, $param_2 = NULL, $con_param = NULL, $form_value = NULL) {
  global $base_url;
  $options = ['- Zvoliť -'];
  $path = drupal_get_path('module', 'beliana_rsw') . '/geodata_SK0/' . $file_name;
  $sr_data = file_get_contents($base_url . '/' . $path);
  $data = json_decode($sr_data);

  if ($con_param != NULL && $form_value != NULL) {
    foreach ($data->features as $value) {
      if ($value->properties->$con_param == $form_value) {
        $options[$value->properties->$param_1] = $value->properties->$param_2;
      }
    }
  } else {
    foreach ($data->features as $value) {
      $options[$value->properties->$param_1] = $value->properties->$param_2;
    }
  }

  return $options;
}

// Get country values form map.sqlite
function get_data_from_map_sqlite($country_code, $admin_level) {
  $options = ['- Zvoliť -'];
  db_set_active('minimap');

  $query = db_query('select distinct osm_id, name from admin_areas where admin_level = :admin_level and country_code = :country_code and name is not null', [':country_code' => $country_code, ':admin_level' => $admin_level]);
  $result = $query->fetchAll();
  db_set_active('default');

  foreach ($result as $item) {
    $options[$item->osm_id] = $item->name;
  }

  return $options;
}

/**
 * Function for handling ajax request
 */
function ajax_dropdown_admin_level($form, $form_state) {
  // Return the dropdown list including the wrapper
  if (empty($form_state["values"]["country_code"])) {
    $form['field_country_select']['admin_level_wrapper']['#prefix'] = '<div id="admin-level-wrapper" class="visually-hidden">';
  } else {
    $form['field_country_select']['admin_level_wrapper']['#prefix'] = '<div id="admin-level-wrapper">';
  }

  return $form['field_country_select']['admin_level_wrapper'];
}

/**
 * Function for handling ajax request
 */
function ajax_dropdown_region($form, $form_state) {
  // Return the dropdown list including the wrapper

  if (empty($form_state["values"]["country_code"])) {
    $form['field_country_select']['region_wrapper']['#prefix'] = '<div id="region-wrapper" class="visually-hidden">';
  } else {
    $form['field_country_select']['region_wrapper']['#prefix'] = '<div id="region-wrapper">';
  }

  return $form['field_country_select']['region_wrapper'];
}

/**
 * Function for handling ajax request
 */
function ajax_dropdown_district($form, $form_state) {
  // Return the dropdown list including the wrapper
  if (empty($form_state["values"]["region"])) {
    $form['field_country_select']['region_wrapper']['district_wrapper']['#prefix'] = '<div id="district-wrapper" class="visually-hidden">';
  } else {
    $form['field_country_select']['region_wrapper']['district_wrapper']['#prefix'] = '<div id="district-wrapper">';
  }

  return $form['field_country_select']['region_wrapper']['district_wrapper'];
}

/**
 * Function for handling ajax request
 */
function ajax_dropdown_municipality($form, $form_state) {
  // Return the dropdown list including the wrapper
  if (empty($form_state["values"]["district"])) {
    $form['field_country_select']['region_wrapper']['municipality_wrapper']['#prefix'] = '<div id="municipality-wrapper" class="visually-hidden">';
  } else {
    $form['field_country_select']['region_wrapper']['municipality_wrapper']['#prefix'] = '<div id="municipality-wrapper">';
  }

  return $form['field_country_select']['region_wrapper']['municipality_wrapper'];
}

/**
 * Helper function force download freemap file.
 *
 * @param $request_time
 *
 * @return void
 */
function _beliana_get_freemap_image() {
  if(!isset($_GET["node_id"])) {
    return;
  }
  if(!isset($_GET["freemap_url"])) {
    return;
  }
  if(!isset($_GET["title"])) {
    return;
  }
  if(!isset($_GET["map_img_fid"])) {
    return;
  }

  $node_id = $_GET["node_id"];
  $freemap_url = $_GET["freemap_url"];
  $random_hash = $node_id;
  if(!$node_id) {
    $random_hash = str_replace('/', '', hash('crc32b', $_GET["title"]));
  }
  $title = str_replace(' ', '-', _beliana_remove_accents(strtolower($_GET["title"]))) . '-' . $random_hash;
  $map_img_fid = $_GET["map_img_fid"];
  $destination = 'public://ilustracia/navrh/';

  $data = [
    'url' => $freemap_url,
    'viewport' => [
      'width' => 1200,
      'height' => 900,
      'deviceScaleFactor' => 2,
    ],
    'searchResultStyle' => [
      'color' => '#DC143C',
      'fillColor' => '#000',
      'fill' => true,
    ],
  ];

  $url = 'http://127.0.0.1:8080';
//  $url = 'host.docker.internal:8080';

  _create_map_image(['png'], $url, $data, $destination, $title, $map_img_fid);
}

/**
 * Helper function force download geodata file.
 *
 * @param $request_time
 *
 * @return void
 */
function _beliana_get_geodata_image() {
  if(!isset($_GET["node_id"])) {
    return;
  }
  if(!isset($_GET["title"])) {
    return;
  }
  if(!isset($_GET["map_img_fid"])) {
    return;
  }
  if(!isset($_GET["geodata_country"])) {
    return;
  }
  if(!isset($_GET["geodata_region"])) {
    return;
  }
  if(!isset($_GET["geodata_district"])) {
    return;
  }
  if(!isset($_GET["geodata_municipality"])) {
    return;
  }
  if(!isset($_GET["geodata_admin_level_4"])) {
    return;
  }

  $node_id = $_GET["node_id"];
  $map_img_fid = $_GET["map_img_fid"];
  $geodata_country = strtolower($_GET["geodata_country"]);
  $geodata_region = $_GET["geodata_region"];
  $geodata_district = $_GET["geodata_district"];
  $geodata_municipality = $_GET["geodata_municipality"];
  $geodata_admin_level_4 = $_GET["geodata_admin_level_4"];
  $destination = 'public://ilustracia/navrh/';

  #map settings
  $features="?features=borders,landcover,limitPlacesToCountry,coastlineBorders"; #starts with ?, must be the first in the url string
  $map_params="&margin=20&scale=1&width=1200&hillshading-opacity=0.7";
  $place_types="&place-types=city";

    #$params_url = "?features=$features&country=$geodata_country&$map_param&minor-borders=$geodata_country:4&micro-borders=$geodata_country:4&place-types=city";
  if ($geodata_admin_level_4) { # not SK
    $geodata_admin_level_4 = urlencode($geodata_admin_level_4);
    $place_types="&place-types=city,town";
    #$params_url = "$features$map_params$place_types&country=$geodata_country&minor-borders=$geodata_country:4&micro-borders=$geodata_country:4&highlight-admin-area=$geodata_admin_level_4";
    $params_url = "$features$map_params$place_types&country=$geodata_country&minor-borders=$geodata_country:4&highlight-admin-area=$geodata_admin_level_4";
  }
  else if ($geodata_municipality) {  #SK 'kraj' + 'okres' + obec`
    $params_url = "$features$map_params$place_types&country=$geodata_country&minor-borders=$geodata_country:4&micro-borders=$geodata_country:8&placeId=$geodata_municipality";
  }
  else if ($geodata_district) {  #SK 'kraj' + 'okres'
    $features = $features . ",scale";
    $geodata_district = urlencode('okres ' . $geodata_district);
    $params_url = "$features$map_params$place_types&country=$geodata_country&minor-borders=$geodata_country:4&micro-borders=$geodata_country:8&highlight-admin-area=$geodata_district";
  }
  else {    #SK 'kraj'
    $features = $features . ",scale";
    $geodata_region = urlencode($geodata_region);
    $params_url = "$features$map_params$place_types&country=$geodata_country&minor-borders=$geodata_country:4&highlight-admin-area=$geodata_region";
  }
 dpm($params_url);

  $url = 'http://127.0.0.1:8081' . $params_url;
//  $url = 'host.docker.internal:8080' . $params_url;

  $random_hash = $node_id;
  if(!$node_id) {
    $random_hash = str_replace('/', '', hash('crc32b', $_GET["title"]));
  }

  $title = str_replace(' ', '-', _beliana_remove_accents(strtolower($_GET["title"]))) . '-' . $random_hash;
  _create_map_image(['png', 'png'], $url, [], $destination, $title, $map_img_fid);
}

/**
 * @param array|null $img_types
 * @param string $url
 * @param array|null $data
 * @param string $destination
 * @param string $title
 * @param $map_img_fid
 */
function _create_map_image(array $img_types = NULL, string $url, array $data = [], string $destination, string $title, $map_img_fid) {
  $info = [
    'status' => FALSE,
  ];

  foreach ($img_types as $img_type) {
    if ($img_type == 'png') {
      if (strpos($url, '?features=')) {
        $url .= '&format=png';
      } else {
        $url .= '?format=png';
      }
    }

    $curl = curl_init();
    $headers = array(
      'Content-Type: image/json',
      'Cache-Control: no-cache, no-store, must-revalidate',
      'Pragma: no-cache',
      'Expires: 0',
    );
    curl_setopt($curl, CURLOPT_URL, $url);
    curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);
    curl_setopt($curl, CURLOPT_POST, 1);
    if (!empty($data)) {
      curl_setopt($curl, CURLOPT_POSTFIELDS, json_encode($data));
    }
    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);
    curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, false);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);

    $response = curl_exec($curl);
    $http_code = curl_getinfo($curl, CURLINFO_HTTP_CODE);

    if ($http_code == 200) {
      $image_data = $response;
      $info['status'] = TRUE;
    }
    else {
      $http_message = curl_error($curl);
      watchdog('error', 'Auth error in node synchronization (' . $url . ') ' . $http_message);
      drupal_json_output($info);
      drupal_exit();
    }

    curl_close($curl);

    file_prepare_directory($destination, FILE_CREATE_DIRECTORY);
    $file = file_save_data($image_data, $destination . $title . '.' . $img_type, FILE_EXISTS_REPLACE);
    image_path_flush($file->uri);
    $info['file_fid'] = $file->fid;
    $info['file_url'] = file_create_url($file->uri);
  }

  drupal_json_output($info);
  drupal_exit();
}


/*
 * Update fields data from mapa/mapa poloha
 */
function update_fields_value_from_map_creator(&$node) {
  if ($node->type != "heslo" && $node->type != 'importovane_heslo') {
    if ($node->type == "ilustracia") {
      if ($node->field_zdroj_ilustracie[LANGUAGE_NONE][0]['value'] == 'Mapa') {
        if (isset($node->field_mapa_obrazok_fid[LANGUAGE_NONE][0]['value'])) {
          $field_mapa_obrazok_fid = $node->field_mapa_obrazok_fid[LANGUAGE_NONE][0]['value'];
          $field_mapa_obrazok_fid_jpg = explode('/', $field_mapa_obrazok_fid);
          $file_jpg = file_load($field_mapa_obrazok_fid_jpg[0]);
          $file_uri = $file_jpg->uri;

          if (!file_destination($file_uri, FILE_EXISTS_ERROR) && $file_jpg) {
            $node->field_obrazok_navrh_[LANGUAGE_NONE][0] = (array)$file_jpg;
            $node->field_subor_ilustracie[LANGUAGE_NONE][0] = [
              'fid' => $file_jpg->fid,
              'display' => 1,
            ];
            image_style_create_derivative(image_style_load('medium'), $file_uri, image_style_path('medium', $file_uri));
          }
        }

        $node->field_meno_autora_diela[LANGUAGE_NONE][0]['value'] = '© Prispievatelia OpenStreetMap';
        $node->field_institucia[LANGUAGE_NONE][0]['value'] = 'Freemap.sk';
        $node->field_url_textu_licencie_l[LANGUAGE_NONE][0]['value'] = 'https://www.freemap.sk';
        $node->field_licencia1[LANGUAGE_NONE][0]['value'] = 'IVL';
        $node->field_modifikovane[LANGUAGE_NONE][0]['value'] = 0;
        $node->field_url_diela_l[LANGUAGE_NONE][0]['url'] = $node->field_freemap_url[LANGUAGE_NONE][0]["value"];
      }
      if ($node->field_zdroj_ilustracie[LANGUAGE_NONE][0]['value'] == 'Mapa - Poloha') {
        if (isset($node->field_mapa_obrazok_fid[LANGUAGE_NONE][0]['value'])) {
          $field_mapa_obrazok_fid = $node->field_mapa_obrazok_fid[LANGUAGE_NONE][0]['value'];

          $file_jpg = file_load(explode('/', $field_mapa_obrazok_fid)[0]);
          $file_uri_jpg = $file_jpg->uri;
          if (!file_destination($file_uri_jpg, FILE_EXISTS_ERROR) && $file_jpg) {
            $node->field_obrazok_navrh_[LANGUAGE_NONE][0] = (array)$file_jpg;
          }

          $file_svg = file_load(explode('/', $field_mapa_obrazok_fid)[1]);
          $file_uri_svg = $file_svg->uri;
          if (!file_destination($file_uri_svg, FILE_EXISTS_ERROR) && $file_svg) {
            $node->field_subor_ilustracie[LANGUAGE_NONE][0] = [
              'fid' => $file_svg->fid,
              'display' => 1,
            ];
          }
        }

        $node->field_meno_autora_diela[LANGUAGE_NONE][0]['value'] = '© Prispievatelia OpenStreetMap';
        $node->field_institucia[LANGUAGE_NONE][0]['value'] = 'Freemap.sk';
        $node->field_url_textu_licencie_l[LANGUAGE_NONE][0]['value'] = 'https://www.freemap.sk';
        $node->field_licencia1[LANGUAGE_NONE][0]['value'] = 'IVL';
        $node->field_modifikovane[LANGUAGE_NONE][0]['value'] = 0;
      }
    }
  }
}

/**
 * Implements hook_node_postsave().
 */
function beliana_rsw_node_postsave($node) {
  if($node->type == 'ilustracia') {
    //replace file uri after create node - ilustracia
    if ($node->field_zdroj_ilustracie[LANGUAGE_NONE][0]['value'] == 'Mapa' ||
        $node->field_zdroj_ilustracie[LANGUAGE_NONE][0]['value'] == 'Mapa - Poloha') {
      if (isset($node->field_mapa_obrazok_fid[LANGUAGE_NONE][0]['value'])) {
        $field_mapa_obrazok_fid = $node->field_mapa_obrazok_fid[LANGUAGE_NONE][0]['value'];
        $destination = 'public://ilustracia/navrh/';
        $file_jpg = file_load(explode('/', $field_mapa_obrazok_fid)[0]);
        $file_uri_jpg = $file_jpg->uri;
        if (!file_destination($file_uri_jpg, FILE_EXISTS_ERROR) && $file_jpg) {
          $title = 'mapa-' . $node->title . '-' . $node->nid;
          if ($node->field_zdroj_ilustracie[LANGUAGE_NONE][0]['value'] == 'Mapa - Poloha') {
            $title = 'mapa-poloha-' . $node->title . '-' . $node->nid;
          }
          $title = str_replace(' ', '-', _beliana_remove_accents(strtolower($title)));
          file_move($file_jpg, $destination . '/' . $title . '.png', FILE_EXISTS_REPLACE);
        }
      }
    }
  }
}

/**
 * Implements hook_init().
 */
function beliana_rsw_init(){
  drupal_add_css(drupal_get_path('module', 'beliana_rsw') . '/css/admin_menu_override.css');
}


/**
 * Implements hook_form_alter().
 */
function beliana_rsw_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'user_profile_form':
      //disable browser remember password on user edit form
      $form['account']['current_pass']['#type'] = 'textfield';
      $form['account']['current_pass']['#attributes']['onfocus'] = "this.setAttribute('type', 'password')";
      break;
    case 'ilustracia_node_form':
      $form['#attached']['js'][] = drupal_get_path('module', 'beliana_rsw') . '/js/freemap.js';
      drupal_add_js([], ['type' => 'setting']);
      break;
  }
}

/**
 * Implements hook_element_info_alter().
 */
function beliana_rsw_element_info_alter(array &$types) {
  if (isset($types['password_confirm'])) {
    $types['password_confirm']['#process'][] = 'beliana_rsw_form_process_password_confirm';
  }
}

/**
 * Process the password_confirm element.
 */
function beliana_rsw_form_process_password_confirm($element) {
  $element['pass1']['#type'] = $element['pass2']['#type'] = 'textfield';
  $element['pass1']['#attributes']['onfocus'] = $element['pass2']['#attributes']['onfocus'] = "this.setAttribute('type', 'password')";

  return $element;
}

/**
 * Extract links from node and insert them into beliana_links table.
 * name "beliana_process_links" is not OK, it is called in unexpected situations with funny arguments
 *
 * @param $nid
 */
function _beliana_process_links(&$node) {
  #dpm("_beliana_process_links", $node->title);
  // Extract links from field_text_hesla.
  $nid = $node->nid;
  db_delete('beliana_links')
      ->condition('origin', $nid)
      ->execute();
  // Extract links.
  $text = $node->field_text_hesla[LANGUAGE_NONE][0]['value'];
  // do not continue if text is empty
  if ($text === "")
    return;
  $dom = beliana_get_dom($node, $text, "Text hesla (beliana_process_links)");
  if (!$dom)
    return;

  /** @var \DOMElement[] $links */
  $links = $dom->getElementsByTagName('a');
  if (!empty($links)) {
    for ($i = $links->length - 1; $i >= 0; $i--) {
      $item = $links->item($i);
      $target = $item->getAttribute('href');
      if (!url_is_external($target)) {
        // Get rid of leading slash.
        if ($target[0] === '/') {
          $target = substr($target, 1);
        }
        // Get non-alias path, so we can get nid from it.
        $path = drupal_get_normal_path($target);
        $path_elements = explode('/', $path);
        // If alias belong to node, then insert record into beliana_links table.
        if ($path_elements[0] === 'node' && is_numeric($path_elements[1])) {
          $link = db_select('beliana_links', 'l')
              ->fields('l', ['origin'])
              ->condition('origin', $nid)
              ->condition('target', $path_elements[1])
              ->execute()
              ->fetchCol(0);
          // We insert new item only if it already doesn't exist.
          if (empty($link)) {
            db_insert('beliana_links')
                ->fields([
                  'origin' => $nid,
                  'target' => $path_elements[1],
                ])
                ->execute();
          }
        }
      }
    }
  }
}

/*
 * modify links in text due to article merging
 */
function modify_links_merged(&$node) {
// currently no code here
}


/**
 * Menu callback for `admin/group-list` path.
 *
 * We are printing users grouped by terms assigned to users.
 *
 * @return string
 *   HTML output of users.
 */

function beliana_group_list() {
  $users = entity_load('user');
  $terms = taxonomy_get_tree(2);
  $output = '';
  $ls0="";
  $ls1="";
  $ls2="";
  //foreach ($terms as $term) {
  $output="";
  $output .='<table style="border: 1px solid gray;">';
  $output .= "<tr><th>"."Hl. kategória"."</th><th>"."Podkategória/LS"."</th><th>"."LS"."</th>";
  $output .= "<th>".'Redaktor'."</th><th>".'Výst. redaktor'."</th><th>".'Autori'."</th><th>".'Konzultanti'."</th><tr>";
  //foreach (array_slice($terms,0,100) as $term) {
  foreach ($terms as $term) {
    // The list seems to be sorted according to the hierarchy, so print items with depth==0 as H1 headers

    if ($term->depth == 0) {
      $ls0 = $term->name;
      $ls1="-";
      $ls2="-";
    } else if ($term->depth == 1) {
      $ls1 = $term->name;
      $ls2="-";
    } else if ($term->depth == 2) {
      $ls2 = $term->name;
    }
    $ausers = _get_users($users,$term->tid);
    $output .= '<tr style="border: 1px solid gray;"><td>'.$ls0."</td><td>".$ls1."</td><td>".$ls2."</td>";
    $output .= "<td>".$ausers['redaktor']."</td><td>".$ausers['vr']."</td><td>".$ausers['autor']."</td><td>".$ausers['konzultant']."</td><tr>\n";
  }
  $output.="</table>";
  return $output;
}


/**
 * Callback function for `workbench_moderation_moderate_form` submit.
 *
 * @inheritdoc
 */
function webrs_beliana_workflow_reaction(&$form, &$form_state) {
  $values = $form_state['values'];
  if (!isset($values['node']->workbench_moderation['current']->state)) {
    return;
  }

  $new_state = $values['state'];
  $cur_state = $values['node']->workbench_moderation['current']->state;

  // check type heslo and importovane heslo
  // (in RS importovane heslo is not processed and in WEBRS is processed (nearly) equaly as heslo)
  if ($values['node']->type === 'heslo' or $values['node']->type === 'importovane_heslo' ) {
    $fail = FALSE;
    // do not change state if article has more that one editor
    // applies on to webrs

    $fail = check_state_change_importovane_to_zaradene($values['node'], $cur_state, $new_state);

    // do not change state if LITE changes exist
    $publish_states = ["na_opakovane_zverejnenie", "na_zalomenie", "importovane_na_zverejnenie"];
    if (in_array($new_state, $publish_states)) {
      $text = $values['node']->field_text_hesla['und'][0]['value'];
      if (strpos($text, "ice-ins") or strpos($text, "ice-del")) {
        $fail = TRUE;
        drupal_set_message('Stav hesla <a href="/' . $values['node']->path['alias'] . '">' . $values['node']->title . '</a> nebol zmenený, lebo v jeho texte sú uložené LITE zmeny', 'error');
      }
      if (isset($values['node']->field_table[LANGUAGE_NONE][0])) {
        $texttab = $values['node']->field_table[LANGUAGE_NONE][0]['value'];
        if (strpos($texttab, "ice-ins") or strpos($texttab, "ice-del")) {
          $fail = TRUE;
          drupal_set_message('Stav hesla <a href="/' . $values['node']->path['alias'] . '">' . $values['node']->title . "</a> nebol zmenený, lebo v poli 'Tabuľka pre geografické heslá' sú uložené LITE zmeny", 'error');
        }
      }
    }
    // check if payment information is stored
    if (($cur_state === "needs_review" and $new_state === "na_zverejnenie") and // u redaktora state u vr1/vr state transition
      _display_payment_fields($values['node']) == "showeditable") {
      $fail = TRUE;
      drupal_set_message('Stav hesla <a href="/' . $values['node']->path['alias'] . '">' . $values['node']->title . "</a> nebol zmenený, lebo nie je vyplnené pole 'Vyplatenie odmeny'", 'error');
    }
    if ($fail) {
      $values['node']->workbench_moderation_state_new = $cur_state;
      node_save($values['node']);
      return;
    }
    # remove links from text of artices in state 'vyradene'
    if (in_array($new_state, ['vyradene']) and strpos($values['node']->field_text_hesla['und'][0]['value'], '</a>')) {
      _beliana_remove_links($values['node']);
      node_save($values['node']);
    }
  }

  // check types heslo and importovane_heslo, ignore for authors
  if (!($cur_state === "u_autora" and $new_state === "needs_review")) {
    if ($values['node']->type === 'importovane_heslo' or $values['node']->type === 'heslo') {
      // Check link correctness
      $skip = FALSE;
      if (!_check_links($values['node'])) {
        $skip = TRUE;
      }
      if ($new_state === 'vyradene') {
        if (!_check_transition_to_vyradene($values['node'])) {
          $skip = TRUE;
        }
      }
      // Check alternative text marker correctness in article body
      if (!_check_alternative_text_markers($values['node'], $values['node']->field_text_hesla['und'][0]['value'], "v hesle")) {
        $skip = TRUE;
      }
      // Check alternative text marker correctness in article table
      if (isset($values['node']->field_table[LANGUAGE_NONE][0])) {
        $text_table = $values['node']->field_table[LANGUAGE_NONE][0]['value'];
        if (!_check_alternative_text_markers($values['node'], $text_table, "v tabuľke pre geografické údaje hesla")) {
          $skip = TRUE;
        }
      }
      if ($skip) {
        drupal_set_message('<strong>Stav hesla nebol zmenený</strong>', 'error');
        $values['node']->workbench_moderation_state_new = $cur_state;
        node_save($values['node']);
        return;
      }
    }
  }

  // check illustration state on transition of 'importovane_heslo' to state 'importovane_u_jr2'
  if ($values['node']->type === 'importovane_heslo' and $new_state == 'importovane_u_jr2') {
    $skip = FALSE;
    $ok_states = ['ilustracia_u_vyst_redaktora_5'];
    $skip = !check_ill_at_node_transition($values['node'], $ok_states, 'state change');
    if ($skip) {
      drupal_set_message('<strong>Stav hesla nebol zmenený</strong>', 'error');
      $values['node']->workbench_moderation_state_new = $cur_state;
      node_save($values['node']);
      return;
    }
  }

  // restore id of the node author from the saved value
  if (($cur_state === "u_konzultanta" and $new_state === "needs_review"))
  {
    if (isset($values['node']->field_uid_autora['und'])) {
      $values['node']->uid = $values['node']->field_uid_autora['und'][0]['value'];
      unset($values['node']->field_uid_autora['und']);
      node_save($values['node']);
    }
  }

  // check illustrations
  if ($values['node']->type === 'ilustracia') {
    $skip = FALSE;
    if ($cur_state == 'ilustracia_u_redaktora' and $new_state == 'ilustracia_u_vyst_redaktora_5') {
      $ilu_node = $values['node'];

      // temporarily disabled
      //if (!_check_ilu_attached($ilu_node, 'state change')) {
        //$skip = TRUE;
      //}

      //if (!_check_field_pouzit($ilu_node, $ilu_node, 'state change')) {
      //$skip = TRUE;
      //}
      // ignore illustrations, which are not intended for web
      if (il_display_on_web($ilu_node)) { //false always returned in the print version
        global $user;
        // do not check for "Výstupný redaktor" in the case of this transition, since it relates to synchronization with book version
        if (empty(array_intersect(["administrátor", "Výstupný redaktor"], $user->roles))) {
            if (is_null(_check_illustration_web($ilu_node, $ilu_node, 'state change'))) {
            $skip = TRUE;
            }
        }
      }
    }

    // a problem with illustration, keep the current state
    if ($skip) {
      drupal_set_message('<strong>Stav ilustrácie nebol zmenený</strong>', 'error');
      $values['node']->workbench_moderation_state_new = $cur_state;
      node_save($values['node']);
      return;
    }
    else {
      $values['node']->field_datum_zverejnenia[LANGUAGE_NONE][0]['value'] = date('Y-m-d H:i:s');
      node_save($values['node']);
    }
  }
}

/* helper function to be called in beliana_group_list */
function _get_users(&$users, $tid)
{
	$roles=array(
		"autor" => '',
		"konzultant" => '',
		"redaktor" => '',
		"vr" => ''
	);
	foreach ($users as $user) {
		//if (strpos($user->name, 'test') !== null) continue;
		if (substr($user->name,0,5) == 'test_') continue;
		if (isset($user->workbench_access[$tid])) {
			if (in_array("Autor", $user->roles)) {
				$roles["autor"] .= '<a href="/user/'.$user->uid.'">'.$user->name.'</a>, ';
			} else if (in_array("Redaktor", $user->roles)) {
				$roles["redaktor"] .= '<a href="/user/'.$user->uid.'">'.$user->name.'</a> ';
			} else if (in_array("Konzultant", $user->roles)) {
				$roles["konzultant"] .= '<a href="/user/'.$user->uid.'">'.$user->name.'</a>, ';
			} else if (in_array("Výstupný redaktor", $user->roles)) {
				$roles["vr"] .= '<a href="/user/'.$user->uid.'">'.$user->name.'</a> ';
			}
		}
	}
	return $roles;
}

/**
 * access callback for beliana_editor_list
 */
function beliana_editor_list_access() {
  global $user;
  // roles with allowed access
  $roles = [
    "Redaktor",
    "administrátor",
  ];
  foreach ($roles as $role) {
    if (in_array($role, $user->roles)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * access callback for beliana_group_list
 */
function beliana_group_list_access() {
  global $user;
  // roles with allowed access
  $roles = [
    "Správca heslára",
    "Výstupný redaktor",
    "administrátor",
    "useradmin",
  ];
  foreach ($roles as $role) {
    if (in_array($role, $user->roles)) {
      return TRUE;
    }
  }
  return FALSE;
}

// check if transition importovane >> zaradene is possible, return false if not
function check_state_change_importovane_to_zaradene($node, $cur_state, $new_state)
{
    $fail = false;
    if (count($node->field_lexikalna_skupina[LANGUAGE_NONE]) > 1 and (($cur_state === "importovane" and $new_state === "zaradene"))) {
      $users = entity_load('user');
      $eds=array(); // list of editors
      // for each category
      foreach ($node->field_lexikalna_skupina[LANGUAGE_NONE] as $ls){
        // for each category in the full hiererchy
        foreach (taxonomy_get_parents_all($ls['tid']) as $category) {
          $node_users=_get_users($users, $category->tid);
          if (($node_users['redaktor'] and !in_array($node_users['redaktor'], $eds))) {
            $eds[] = $node_users['redaktor'];
          }
        }
      }
      // if too many editors
      if( count($eds) > 1 ){
        $fail = TRUE;
        drupal_set_message('Stav hesla <a href="/' .
          $values['node']->path['alias'] . '">' .
          $values['node']->title .
          "</a> nebol zmenený, lebo jeho lexikálne skupiny majú rôznych redaktorov (".
          implode(", ",$eds).
          "). Do stavu 'Zaradené' možno heslá odosielať len ak majú jedného redaktora.",
          'error');
      }
    }
    return $fail;
}

// transfer node from the book editorial system
// $node: current node
// $remote_node: remote node (data)
function beliana_sync_from_remote_build($node, $remote_node, $login) {
  global $user;

  // remote accept states
  $heslo_accept_states = ['ukoncenezluene', 'publikovane_na_webe','v_zalamovani', 'na_zalomenie'];
  $heslo_accept_states_hr = ['Ukončené/zlúčené', 'Zalomené','V zalamovaní (korektura)', 'Na zalomenie'];    // human readable
  $ilu_accept_states = ['ilustracia_na_webe', 'ilustracia_na_zverejnenie'];
  $ilu_accept_states_hr = ['Ilustrácia na zalomenie'];	// human readable

  $local_site = "webrs";
  $remote_site = "rs";
  $local_uri = variable_get('base_url');
  $remote_uri = variable_get('rs_api_uri');

  // accept content if remote is in the accept state
  if (in_array($remote_node->workbench_moderation->current->state, array_merge($heslo_accept_states,$ilu_accept_states)))
  {
    // fields ignored or treated in a special way
    $fields_to_skip = [
      'field_remote_id',      // keep local value
      'field_datum_prebratia',// set here
      'field_ilustracia',     // special processing
      'field_zlucene_z',      // special processing
      'field_zlucene_do',     // special processing
      'field_text_hesla',     // special processing
      'field_komentar_instrukcie',   // special processing
      'field_text_z_gh',      // ignored
      'field_spravit_1_korekturu',   // ignored
      'field_povodne_lexikalne_skupiny',   // ignored
      'field_redaktori_zluceneho',   // ignored
      'field_vyslo_knizne',   // ignored
      'field_errta',          // ignored
      'field_atributy',       // ignored
      //'field_datum_autorovho_textu', // special processing
      'field_vyplatit',       // special processing
      'field_dlzka_autorovho_textu_zad',   // ignored
    ];

    // transfer field values from remote node to local node
    foreach ($remote_node as $field => $data) {
      $remote_field_value = empty($data) ? '' : json_decode(json_encode($data), TRUE);

      // copy value except for the skipped ones
      if (($field == 'uid' || $field == 'title' || strpos($field, 'field_') === 0) && !in_array($field, $fields_to_skip)) {
        $node->{$field} = $remote_field_value;
      }

      // fetch inline images and update their paths in text
      if ($field == 'field_text_hesla') {
        // fix weird formatting
        $remote_field_value[LANGUAGE_NONE][0]['value'] = str_replace("&nbsp;"," ", $remote_field_value[LANGUAGE_NONE][0]['value']);
        $remote_field_value[LANGUAGE_NONE][0]['value'] = str_replace(" ", " ", $remote_field_value[LANGUAGE_NONE][0]['value']); //remove nonbreakable space
        $remote_field_value[LANGUAGE_NONE][0]['value'] = str_replace(" </strong>","</strong> ", $remote_field_value[LANGUAGE_NONE][0]['value']);
        $remote_field_value[LANGUAGE_NONE][0]['value'] = str_replace(" </em>","</em> ", $remote_field_value[LANGUAGE_NONE][0]['value']);
        $remote_field_value[LANGUAGE_NONE][0]['value'] = str_replace("<strong> "," <strong>", $remote_field_value[LANGUAGE_NONE][0]['value']);
        $remote_field_value[LANGUAGE_NONE][0]['value'] = str_replace("<em> "," <em>", $remote_field_value[LANGUAGE_NONE][0]['value']);
        $remote_field_value[LANGUAGE_NONE][0]['value'] = str_replace("⬈ ","", $remote_field_value[LANGUAGE_NONE][0]['value']);
        $remote_field_value[LANGUAGE_NONE][0]['value'] = str_replace("⬈","", $remote_field_value[LANGUAGE_NONE][0]['value']);
        // change 1234—56 to 1234 – 56 (first dash is emdash, second is endash
        $remote_field_value[LANGUAGE_NONE][0]['value'] = preg_replace("/([1-9])—([1-9])/","$1 – $2", $remote_field_value[LANGUAGE_NONE][0]['value']);

        // find <img tags
        // "[>]" used in the regexp to make the vim editor happy, otherwise '>' is OK
        $matches = [];
        preg_match_all('/<img.*?src=[\'"](.*?)[\'"].*?[>]/i', $remote_field_value[LANGUAGE_NONE][0]['value'], $matches);

        // fetch and update
        if (!empty($matches)) {
          foreach ($matches[1] as $src) {
            $data = file_get_contents($remote_uri . $src);
            $new_src = str_replace($remote_site, $local_site, $src);
            $file = file_save_data($data, str_replace('/sites/' . $local_site . '/files/', 'public://', $new_src), FILE_EXISTS_REPLACE);

            $remote_field_value[LANGUAGE_NONE][0]['value'] = str_replace('src="' . $src, 'src="' . $new_src, $remote_field_value[LANGUAGE_NONE][0]['value']);
            $remote_field_value[LANGUAGE_NONE][0]['safe_value'] = str_replace('src="' . $src, 'src="' . $new_src, $remote_field_value[LANGUAGE_NONE][0]['safe_value']);
          }
        }
        $node->field_text_hesla = $remote_field_value;
      }

      if ($field == 'field_komentar_instrukcie') {
        $node->field_komentar_instrukcie[LANGUAGE_NONE][0]['value'] = "Obsah prevzatý z knižného RS " . date('Y-m-d').".";

        if (!empty($remote_field_value)) {
          $node->field_komentar_instrukcie[LANGUAGE_NONE][0]['value'] .= "\n" . $remote_field_value[LANGUAGE_NONE][0]['value'];
        }
      }

      // only for 'ilustracia', transfer image files
      if (in_array($field, [ 'field_subor_ilustracie', 'field_obrazok_navrh_', 'field_original', ])) {
        if (!empty($remote_field_value)) {
          if (isset($node->{$field}[LANGUAGE_NONE]) ) $node->{$field}[LANGUAGE_NONE] = [];
          // get the file(s)
          foreach ($remote_field_value[LANGUAGE_NONE] as $key => $remote_file) {
            $data = file_get_contents($remote_uri . '/sites/' . $remote_site . '/files' . str_replace('public:/', '', $remote_file['uri']));
            $file = file_save_data($data, $remote_file['uri'], FILE_EXISTS_REPLACE);

            $node->{$field}[LANGUAGE_NONE][$key] = [
              'fid' => $file->fid,
              'uid' => $file->uid,
              'filename' => $file->filename,
              'uri' => $file->uri,
              'filemime' => $file->filemime,
              'filesize' => $file->filesize,
              'status' => 1,
              'display' => 1,
              'description' => '',
            ];
          }
        }
      }

      // fields containing identifiers of other nodes.
      // It is necessary to check the 'field_remote_id' of the referenced node to get the correct local nid
      // we do not sync ilustracia bundle referenced here, ilustracia should be synced directly like nodes
      if (in_array($field, [ 'field_ilustracia', 'field_zlucene_z', 'field_zlucene_do', ])) {
        $node->{$field}[LANGUAGE_NONE] = [];

        if (!empty($remote_field_value)) {
          foreach ($remote_field_value[LANGUAGE_NONE] as $delta => $target) {
            // fetch the remote node
            if ($target_remote_node = beliana_api_rest_get_node($target['target_id'], $login)) {
              // if 'empty()' node ids on both sides are equal, so use target_remote_node->nid.
              $node->{$field}[LANGUAGE_NONE][$delta]['target_id'] =
                empty($target_remote_node->field_remote_id->und) ? $target_remote_node->nid : $target_remote_node->field_remote_id->und[0]->value;
            }
          }
        }
      }
    }

    // Payment: payment of a transferred article has been already set in the book editorial system
    // So just set the field value to 'Vyplatené v RS' and unset field_dlzka_autorovho_textu_zad and field_datum_autorovho_textu
    $node->field_vyplatit[LANGUAGE_NONE][0]['value'] = 'Vyplatené v RS';
    if (isset($node->field_dlzka_autorovho_textu_zad[LANGUAGE_NONE])) unset($node->field_dlzka_autorovho_textu_zad[LANGUAGE_NONE]);
    if (isset($node->field_datum_autorovho_textu[LANGUAGE_NONE])) unset($node->field_datum_autorovho_textu[LANGUAGE_NONE]);

    $node->field_datum_prebratia = [LANGUAGE_NONE => [['value' => date('Y-m-d H:i:s')]]];
    $node->revision = 1;


    # add text to revision log
    $message_log = format_string('Obsah prevzatý z knižného RS (@d, @u)', ['@d'=>date('Y-m-d'), '@u'=>$user->name]);
    if (strpos($node->log, $message_log) === FALSE) {
      $node->log = $message_log;
    }

    // specify the new node state for heslo, keep it for ilustracia and save the node in both cases
    if ($node->type == 'heslo') {
      if ( $remote_node->workbench_moderation->current->state == 'vyradene' ) {
        $moderate_to = 'vyradene';
      } elseif ( $remote_node->workbench_moderation->current->state == 'ukoncenezluene' ) {
        $moderate_to = 'ukoncenezluene';
      } else {  //all other cases
        $moderate_to = 'prevzate_z_rs';
      }

      // save node and moderate it to new state
      workbench_moderation_moderate($node, $moderate_to);
      drupal_set_message(format_string('Obsah hesla <a href="@url/node/@id">@title</a> bol úspešne prebratý, nový stav: @state.', [
        '@url' => $local_uri,
        '@title' => $remote_node->title,
        '@id' => $node->nid,
        '@state' => $moderate_to
      ]));
    } else {
      node_save($node);
      drupal_set_message(format_string('Obsah ilustrácie <a href="@url/node/@id">@title</a> bol úspešne prebratý.', [
        '@url' => $local_uri,
        '@title' => $remote_node->title,
        '@id' => $node->nid
      ]));
    }
  }
  else  #failed (incorrect state on the book side)
  {
    if ($node->type == 'ilustracia') {
      drupal_set_message(format_string('Nepodarilo sa prevziať obsah ilustrácie <a href="@url/node/@id">@title</a> (v knižnom RS nie je v žiadnom zo stavov: @state)', [
        '@url' => $remote_uri,
        '@title' => $remote_node->title,
        '@id' => $remote_node->nid,
        '@state' => implode(", ", $ilu_accept_states_hr)
      ]), 'warning');
    } else {
      drupal_set_message(format_string('Nepodarilo sa prevziať obsah hesla <a href="@url/node/@id">@title</a> (v knižnom RS nie je v žiadnom zo stavov: @state)', [
        '@url' => $remote_uri,
        '@title' => $remote_node->title,
        '@id' => $remote_node->nid,
        '@state' => implode(", ", $heslo_accept_states_hr)
      ]), 'warning');
    }
  }
}

// decides if the "Prebrať obsah" menu item is displayed and thus is a user can synchronize content
function beliana_sync_from_remote_access($node) {
  global $user;

  // Access rights must be set in /admin/config/workbench/access/ (even for administrator)
  // Permission to be set: Beliana / Allow synchronise remote node
  // returns 'deny' or Null
  $response = workbench_access_node_access($node, 'update', $user);

  if ($response != NODE_ACCESS_DENY && user_access('sync heslo content')) {
    switch ($node->type) {
      /* We do not allow synchronization of individual articles from article view anymore
      case 'heslo':
        return in_array($node->workbench_moderation['current']->state, [
          //'zaradene',	// removed, since synced node already has information about the author. In stare 'zaradene' we expect no such information
          'needs_review',
        ]);
      */
      case 'ilustracia':
        # illustration can be synchronized by roles 'administrátor, 'redaktor' 'Výstupný redaktor':
        if (in_array("administrátor", $user->roles)) {
            return TRUE;
        }
        # ilustracia_u_vyst_redaktora_5 == "Ilustrácia u výst. redaktora"
        else if (in_array("Výstupný redaktor", $user->roles) and $node->workbench_moderation['current']->state == 'ilustracia_u_vyst_redaktora_5') {
            return TRUE;
        }
        else if (in_array("Redaktor", $user->roles) and $node->workbench_moderation['current']->state == 'ilustracia_u_redaktora') {
            return TRUE;
        }
        else {
            return FALSE;
        }
    }
  }
  return FALSE;
}

// check if field related to payment should be displayed, and if, then how (editable, noneditable)
// return strings hideall enableall or showeditable
function _display_payment_fields(&$node) {
  #do not show the fields for new items
  if (!isset($node->nid)) {
    #dpm("hideall (nove heslo)", "display_payment_fields");
    return "hideall";
  }

  #do not show the fields for merged (zlucene) articles (i. e. field_zlucene_z is nonempty)
  if (isset($node->field_zlucene_z[LANGUAGE_NONE][0])) {
    #dpm("hideall (merged)", "display_payment_fields");
    return "hideall";
  }

  global $user;
  $curstate = $node->workbench_moderation['current']->state;
  //dpm($user);
  // administrator has access to everything
  if (in_array("administrátor", $user->roles)) { // $form: node
    #dpm("enableall", "display_payment_fields");
    return "enableall";
  }

  // if filled out, field_datum_autorovho_textu is set.  Just show, do not edit
  //if (isset($node->field_datum_autorovho_textu[LANGUAGE_NONE][0]['value'])) {
  if (isset($node->field_vyplatit[LANGUAGE_NONE][0]['value'])) {
    #dpm("showdisabled (filled out)", "display_payment_fields, field_datum_autorovho_textu is set");
    return ("showdisabled");
  }

  if ($curstate === 'needs_review') {
    #dpm("showeditable (no transition, needs_review)", "display_payment_fields");
    return ("showeditable");
  }
  else {
    #dpm("hideall (no transition, no needs_review)", "display_payment_fields");
    return ("hideall");
  }
}

# vim: ai ts=2 sts=2 et sw=2 ft=php
