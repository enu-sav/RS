<?php

use GuzzleHttp\Client;

/**
 * Implements hook_ckeditor_plugins().
 */
function ckeditor_bkb_comment_ckeditor_plugin() {
  return [
    'comments' => [
      'name' => 'ckeditor_bkb_comment',
      'desc' => t('Add BKB comment link'),
      'path' => drupal_get_path('module', 'ckeditor_bkb_comment') . '/ckeditor_plugin/',
      'buttons' => [
        'comments' => [
          'icon' => 'images/comments.png',
          'label' => 'Autocomplete Link',
        ],
      ],
    ],
  ];
}

/**
 * Implements hook_menu().
 */
function ckeditor_bkb_comment_menu() {
  $items = [];

  $items['ckeditor/autocomplete_link/%'] = [
    'page callback' => 'ckeditor_bkb_comment_callback',
    'access arguments' => ['access content'],
    'page arguments' => [2],
    'type' => MENU_CALLBACK,
  ];

  $items['get_comment_text/%'] = [
    'page callback' => 'get_comment_text_callback',
    'access arguments' => ['access content'],
    'page arguments' => [1],
    'type' => MENU_CALLBACK,
  ];

  return $items;
}

/**
 * AJAX callback for CKEditor autocomplete.
 */
function ckeditor_bkb_comment_callback($nid) {
  $links = [];
  $query = isset($_GET['query']) ? $_GET['query'] : '';
  $query = check_plain($query);
  $node = node_load($nid);
  if ($node instanceof stdClass && isset($node->nid)) {
    $alias = drupal_get_path_alias('node/' . $node->nid);
    $client = new Client([
      'base_uri' => variable_get('beliana_bkb_uri'),
      'verify' => FALSE,
      'headers' => [
        'Content-Type' => 'application/json',
        'Accept' => 'application/json',
      ],
    ]);

    $url = '/jsonapi/comment?page[limit]=5&filter[url][condition][path]=url.uri&filter[url][condition][operator]=ENDS_WITH&filter[url][condition][value]=' . $alias . '&filter[comment][operator]=CONTAINS&filter[comment][value]=' . $query;
    $response = $client->request('GET', $url);
    if ($response->getStatusCode() === 200) {
      $data = json_decode($response->getBody());
      if (!empty($data)) {
        foreach ($data->data as $item) {
          if (isset($item->attributes->comment)) {
            $comment = $item->attributes->comment;
            $links[] = [
              'label' => strlen($comment) > 75 ? substr($comment, 0, 75) . '...' : $comment,
              'value' => $item->attributes->drupal_internal__id,
            ];
          }
        }
      }
    }
  }

  drupal_json_output($links);
  exit;
}

/**
 * Callback to get comment text from BKB.
 */
function get_comment_text_callback($commentID) {
  $cache_id = 'ckeditor_bkb_comment_' . md5($commentID);

  // Try to get data from cache first
  $cached_data = cache_get($cache_id);

  if ($cached_data) {
    $links = $cached_data->data;
  }
  else {
    // Perform API request if no cached data
    $client = new Client([
      'base_uri' => variable_get('beliana_bkb_uri'),
      'verify' => FALSE,
      'headers' => [
        'Content-Type' => 'application/json',
        'Accept' => 'application/json',
      ],
    ]);

    $url = '/jsonapi/comment?include=sources,sources.source&filter[drupal_internal__id]=' . $commentID;
    $response = $client->request('GET', $url);
    $links = [];
    if ($response->getStatusCode() === 200) {
      $data = json_decode($response->getBody());
      if (!empty($data)) {
        // Sources (Zdroje) output.
        $json_data = drupal_json_decode($response->getBody());
        $sources_text = render_sources_from_json($json_data);
        $sources = nl2br(($sources_text));

        foreach ($data->data as $item) {
          if (isset($item->attributes->comment)) {
            $links = [
              //'label' => $item->attributes->label,
              'value' => $item->attributes->drupal_internal__id,
              'commentText' => $item->attributes->comment . $sources,
            ];
          }
        }
      }
    }

    // Store the result in the cache with a 3600-second expiration (1 hour)
    cache_set($cache_id, $links, 'cache', REQUEST_TIME + 3600);
  }

  drupal_json_output($links);
  exit;
}

function render_sources_from_json($json_data) {
  $included = $json_data['included'];
  $output = "<br>\n<b>Zdroje:</b>\n";

  // Separate groups and sources
  $groups = array_filter($included, function($item) {
    return $item['type'] === 'source--group';
  });

  $sources = array_filter($included, function($item) {
    return $item['type'] === 'source';
  });

  // Index sources by ID
  $sources_by_id = array();
  foreach ($sources as $source) {
    $sources_by_id[$source['id']] = $source;
  }

  $index = 1;
  foreach ($groups as $group) {
    $source_ref = $group['relationships']['source']['data'];
    if (!isset($source_ref['id']) || $source_ref['type'] !== 'source') {
      continue;
    }

    $source_id = $source_ref['id'];
    if (!isset($sources_by_id[$source_id])) {
      continue;
    }

    $source = $sources_by_id[$source_id];
    $source_label = $source['attributes']['label'];

    $output .= "Zdroj [{$index}]\n";
    $output .= $source_label . "\n";

    if (!empty($group['attributes']['pages'])) {
      $output .= "Strany:" . $group['attributes']['pages'] . "\n";
    }

    $published = $group['attributes']['published'] ? 'Áno' : 'Nie';
    $used = $group['attributes']['used'] ? 'Áno' : 'Nie';

    $output .= "Zverejniť: $published\n";
    $output .= "Použité: $used\n\n";

    $index++;
  }

  return trim($output);
}


/**
 * Implements hook_init().
 */
function ckeditor_bkb_comment_init() {
  drupal_add_css(drupal_get_path('module', 'ckeditor_bkb_comment') . '/css/admin_ckeditor_override.css');
}

/**
 * Implements hook_page_alter().
 */
function ckeditor_bkb_comment_page_alter(&$page) {
  global $base_url;
  // Check if we are on a node page
  if ($node = menu_get_object()) {
    if (in_array($node->type, ['heslo', 'importovane_heslo'])) {
      // Pass the Node ID to JavaScript using drupalSettings
      $alias = drupal_get_path_alias('node/' . $node->nid);
      $absolute_url = $base_url . '/' . $alias;
      $bkb_url = variable_get('beliana_bkb_uri') . '/word/add?label=' . $node->title . '&url=' . $absolute_url;
      drupal_add_js([
        'ckeditor_bkb_comment' => [
          'nid' => (integer) $node->nid,
          'bkb_add_url' => $bkb_url,
          'bkb_edit_url' => variable_get('beliana_bkb_uri') . '/word/',
        ],
      ], 'setting');
    }
  }
}

/**
 * Implements MODULE_preprocess_HOOK().
 */
function ckeditor_bkb_comment_preprocess_node(&$variables) {
  if (in_array($variables['type'], ['heslo', 'importovane_heslo'])) {
    drupal_add_js(drupal_get_path('module', 'ckeditor_bkb_comment') . '/js/tooltip.js');
    drupal_add_css('https://unpkg.com/tippy.js@6/dist/tippy.css', [
      'type' => 'external',
    ]);

    drupal_add_js('https://unpkg.com/@popperjs/core@2', 'external');
    drupal_add_js('https://unpkg.com/tippy.js@6', 'external');
  }
}

/**
 * Implements hook_form_alter().
 */
function ckeditor_bkb_comment_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'rs_beliana_sync_ui_sync_settings_form') {
    $form['bkb'] = [
      '#type' => 'fieldset',
      '#title' => 'Beliana BKB config',
    ];

    $form['bkb']['beliana_bkb_uri'] = [
      '#type' => 'textfield',
      '#title' => t('BKB URI'),
      '#default_value' => variable_get('beliana_bkb_uri'),
    ];
  }
}
