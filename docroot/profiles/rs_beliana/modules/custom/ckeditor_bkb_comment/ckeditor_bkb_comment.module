<?php

use GuzzleHttp\Client;

/**
 * Implements hook_library().
 */
function ckeditor_bkb_comment_library() {
  $libraries['tooltip'] = [
    'title' => 'Tooltip',
    'version' => '1.0.0',
    'js' => [
      drupal_get_path('module', 'ckeditor_bkb_comment') . '/js/tooltip.js' => [],
    ],
    'dependencies' => [
      ['ckeditor_bkb_comment', 'tippy'],
    ],
  ];

  $libraries['tippy'] = [
    'title' => 'Tippy',
    'version' => '6.3.7',
    'js' => [
      'https://unpkg.com/tippy.js@6.3.7/dist/tippy-bundle.umd.min.js' => ['type' => 'external'],
    ],
    'css' => [
      'https://unpkg.com/tippy.js@6.3.7/dist/tippy.css' => ['type' => 'external'],
    ],
    'dependencies' => [
      ['ckeditor_bkb_comment', 'popper'],
    ],
  ];

  $libraries['popper'] = [
    'title' => 'Popper',
    'version' => '2.11.8',
    'js' => [
      'https://unpkg.com/@popperjs/core@2.11.8/dist/umd/popper.min.js' => ['type' => 'external'],
    ],
  ];

  return $libraries;
}

/**
 * Implements hook_ckeditor_plugins().
 */
function ckeditor_bkb_comment_ckeditor_plugin() {
  return [
    'comments' => [
      'name' => 'ckeditor_bkb_comment',
      'desc' => t('Add BKB comment link'),
      'path' => drupal_get_path('module', 'ckeditor_bkb_comment') . '/ckeditor_plugin/',
      'buttons' => [
        'comments' => [
          'icon' => 'images/comments.png',
          'label' => 'Autocomplete Link',
        ],
      ],
    ],
  ];
}

/**
 * Implements hook_ckeditor_settings_alter().
 */
function ckeditor_bkb_comment_ckeditor_settings_alter(&$settings, $conf) {
  $library = drupal_get_library('ckeditor_bkb_comment', 'tippy');

  if (!empty($library['css'])) {
    $keys = array_keys($library['css']);
    $settings['contentsCss'] = array_merge($settings['contentsCss'], $keys);
  }
}


/**
 * Implements hook_menu().
 */
function ckeditor_bkb_comment_menu() {
  $items = [];

  $items['ckeditor/autocomplete_link/%'] = [
    'page callback' => 'ckeditor_bkb_comment_callback',
    'access arguments' => ['access content'],
    'page arguments' => [2],
    'type' => MENU_CALLBACK,
  ];

  $items['get_comment_text/%'] = [
    'page callback' => 'get_comment_text_callback',
    'access arguments' => ['access content'],
    'page arguments' => [1],
    'type' => MENU_CALLBACK,
  ];

  return $items;
}

/**
 * AJAX callback for CKEditor autocomplete.
 */
function ckeditor_bkb_comment_callback($nid) {
  $links = [];
  $query = isset($_GET['query']) ? $_GET['query'] : '';
  $query = check_plain($query);
  $node = node_load($nid);
  if ($node instanceof stdClass && isset($node->nid)) {
    $alias = drupal_get_path_alias('node/' . $node->nid);
    $client = new Client([
      'base_uri' => variable_get('beliana_bkb_uri'),
      'verify' => FALSE,
      'headers' => [
        'Content-Type' => 'application/json',
        'Accept' => 'application/json',
      ],
    ]);

    $url = '/jsonapi/comment?filter[url][condition][path]=url.uri&filter[url][condition][operator]=ENDS_WITH&filter[url][condition][value]=' . $alias . '&sort=drupal_internal__id';
    $response = $client->request('GET', $url);
    if ($response->getStatusCode() === 200) {
      $data = json_decode($response->getBody());
      if (!empty($data)) {
        $delta = 0;
        foreach ($data->data as $item) {
          if (isset($item->attributes->comment)) {
            $delta++;
            $comment = $item->attributes->comment;

            if (empty($query) || (strpos($comment, $query) !== FALSE)) {
              $links[] = [
                'id' => $delta,
                'label' => '[' . $delta . ']: ' . $comment,
                'value' => $item->attributes->drupal_internal__id,
                'parent' => $item->attributes->parent,
              ];
            }
          }
        }
      }
    }
  }

  drupal_json_output($links);
  exit;
}

/**
 * Callback to get comment text from BKB.
 *
 * @param int $commentID
 * @param bool $source
 */
function get_comment_text_callback($commentID) {
  $cache_id = 'ckeditor_bkb_comment_' . md5($commentID);

  // Try to get data from cache first
  $cached_data = cache_get($cache_id);

  if ($cached_data) {
    $links = $cached_data->data;
  }
  else {
    // Perform API request if no cached data
    $client = new Client([
      'base_uri' => variable_get('beliana_bkb_uri'),
      'verify' => FALSE,
      'headers' => [
        'Content-Type' => 'application/json',
        'Accept' => 'application/json',
      ],
    ]);

    $url = '/jsonapi/comment?include=sources,sources.source,sources.source.attachment&filter[drupal_internal__id]=' . $commentID;
    $response = $client->request('GET', $url);
    $links = [];
    if ($response->getStatusCode() === 200) {
      $data = json_decode($response->getBody());
      if (!empty($data)) {
        // Sources (Zdroje) output.
        $json_data = drupal_json_decode($response->getBody());
        $sources_text = render_sources_from_json($json_data);
        $sources = nl2br(($sources_text));

        foreach ($data->data as $item) {
          if (isset($item->attributes->comment)) {
            $links = [
              'value' => $item->attributes->drupal_internal__id,
              'commentText' => $item->attributes->comment . $sources,
              'plainCommentText' => $item->attributes->comment,
            ];
          }
        }
      }
    }

    // Store the result in the cache with a 3600-second expiration (1 hour)
    cache_set($cache_id, $links, 'cache', REQUEST_TIME + 3600);
  }

  drupal_json_output($links);
  exit;
}

/**
 * Function to format JSON to tooltip formatting.
 */
function render_sources_from_json($json_data) {
  $included = $json_data['included'];
  $output = "<br>\n<b>Zdroje:</b>\n<ul>";

  $groups = array_filter($included, fn($item) => $item['type'] === 'source--group');
  $sources = array_filter($included, fn($item) => $item['type'] === 'source');
  $files = array_filter($included, fn($item) => $item['type'] === 'file');
  $sources_by_id = [];
  foreach ($sources as $source) {
    $sources_by_id[$source['id']] = $source;
  }

  $files_by_id = [];
  foreach ($files as $file) {
    $files_by_id[$file['id']] = $file;
  }

  foreach ($groups as $group) {
    $group_index = $group['attributes']['index'];
    $source_ref = $group['relationships']['source']['data'];
    if (!isset($source_ref['id']) || $source_ref['type'] !== 'source') {
      continue;
    }

    $source_id = $source_ref['id'];
    if (!isset($sources_by_id[$source_id])) {
      continue;
    }

    $source = $sources_by_id[$source_id];
    $source_label = $source['attributes']['label'];
    $output .= "<li>Zdroj [{$group_index}]: ";

    if (strpos($source_label, 'digitalna-kniznica.beliana.sav.sk') !== FALSE) {
      parse_str(parse_url($source_label)['query'], $query);
      $output .= "<a href=\"$source_label\" target=\"_blank\">" . $query['title'] . "</a>\n";
    }
    else {
      $output .= $source_label . "\n";
    }

    // Handle PDF attachment
    if (!empty($source['relationships']['attachment']['data'])) {
      $attachment = $source['relationships']['attachment']['data'];
      $file_id = $attachment['id'] ?? NULL;

      if ($file_id && isset($files_by_id[$file_id])) {
        $file = $files_by_id[$file_id];
        $file_url = variable_get('beliana_bkb_uri') . $file['attributes']['uri']['url'] ?? NULL;
        if ($file_url) {
          $output .= "PDF: <a href=\"$file_url\" target=\"_blank\">" . t('Stiahnut') . "</a>\n";
        }
        else {
          $output .= "PDF: (neplatná URL)\n";
        }
      }
      else {
        $output .= "PDF: (súbor nenájdený)\n";
      }
    }

    //    $published = $group['attributes']['published'] ? 'Áno' : 'Nie';
    //    $used = $group['attributes']['used'] ? 'Áno' : 'Nie';
    //
    //    $output .= "Zverejniť: $published\n";
    //    $output .= "Použité: $used\n\n";

    $output .= "</li>";
  }

  $output .= "</ul>";

  return $output;
}


/**
 * Implements hook_init().
 */
function ckeditor_bkb_comment_init() {
  drupal_add_css(drupal_get_path('module', 'ckeditor_bkb_comment') . '/css/admin_ckeditor_override.css');
}

/**
 * Implements hook_page_alter().
 */
function ckeditor_bkb_comment_page_alter(&$page) {
  global $base_url;
  // Check if we are on a node page
  if ($node = menu_get_object()) {
    if (in_array($node->type, ['heslo', 'importovane_heslo'])) {
      // Pass the Node ID to JavaScript using drupalSettings
      $alias = drupal_get_path_alias('node/' . $node->nid);
      $absolute_url = $base_url . '/' . $alias;
      $bkb_url = variable_get('beliana_bkb_uri') . '/source-comment/add';
      drupal_add_js([
        'ckeditor_bkb_comment' => [
          'nid' => (integer) $node->nid,
          'bkb_add_url' => $bkb_url . '?title=' . $node->title . '&url=' . $absolute_url,
          'bkb_edit_url' => $bkb_url,
        ],
      ], 'setting');
    }
  }
}

/**
 * Implements MODULE_preprocess_HOOK().
 */
function ckeditor_bkb_comment_preprocess_node(&$variables) {
  if (in_array($variables['type'], ['heslo', 'importovane_heslo'])) {
    drupal_add_library('ckeditor_bkb_comment', 'tooltip');
  }
}

/**
 * Implements hook_form_alter().
 */
function ckeditor_bkb_comment_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'heslo_node_form':
    case 'importovane_heslo_node_form':
      drupal_add_library('ckeditor_bkb_comment', 'tooltip');
      break;
    case 'rs_beliana_sync_ui_sync_settings_form':
      $form['bkb'] = [
        '#type' => 'fieldset',
        '#title' => 'Beliana BKB config',
      ];

      $form['bkb']['beliana_bkb_uri'] = [
        '#type' => 'textfield',
        '#title' => t('BKB URI'),
        '#default_value' => variable_get('beliana_bkb_uri'),
      ];
      break;
  }
}
